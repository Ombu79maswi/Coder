import openai
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Configuración de la API de OpenAI
openai.api_key = "tu_api_key_aqui"

def generar_respuesta(prompt, max_tokens=100, temperature=0.7):
    """
    Función para generar respuestas de texto usando OpenAI GPT.
    """
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=prompt,
        max_tokens=max_tokens,
        temperature=temperature
    )
    return response.choices[0].text.strip()

def generar_imagen(prompt):
    """
    Función para generar imágenes usando OpenAI DALL-E.
    """
    response = openai.Image.create(
        prompt=prompt,
        n=1,
        size="1024x1024"
    )
    return response['data'][0]['url']

# 1. Gestión de Renta y Control de Morosos
prompt_renta = "El inquilino en Calle Falsa 123 tiene un pago pendiente de $500 desde hace 30 días. Genera un recordatorio con un interés acumulado del 5%."
print("Prompt:", prompt_renta)
output_renta = generar_respuesta(prompt_renta)
print("Respuesta del modelo:")
print(output_renta)

# 2. Generación de imagen para el recordatorio (si aplica)
prompt_imagen_renta = "Diseña un recordatorio visual para un inquilino con un pago pendiente de $500, con interés acumulado de 5%."
url_imagen_renta = generar_imagen(prompt_imagen_renta)
print("URL de la imagen generada:", url_imagen_renta)

# 3. Cálculo y Distribución de Expensas
prompt_expensas = "Calcula las expensas para un consorcio con $2400 en gastos comunes, distribuidos entre 3 unidades: A (50m2), B (30m2) y C (20m2)."
print("Prompt:", prompt_expensas)
output_expensas = generar_respuesta(prompt_expensas)
print("Respuesta del modelo:")
print(output_expensas)

# 4. Visualización del Estado Financiero
# Crear datos ficticios para visualización
data = {
    'Unidad': ['A', 'B', 'C'],
    'Pagos Pendientes ($)': [500, 200, 300],
    'Expensas Mensuales ($)': [800, 600, 400]
}
df = pd.DataFrame(data)

# Visualizar datos en un gráfico de barras
df.plot(kind='bar', x='Unidad', stacked=True, title='Estado Financiero')
plt.ylabel('Monto ($)')
plt.show()

# 5. Recomendaciones para Optimización de Rentas
prompt_rentas = "Recomienda ajustes de renta para una propiedad en el barrio Palermo, basada en un análisis del mercado local."
print("Prompt:", prompt_rentas)
output_rentas = generar_respuesta(prompt_rentas)
print("Respuesta del modelo:")
print(output_rentas)

# 6. Generación de imagen para optimización de rentas (si aplica)
prompt_imagen_rentas = "Genera un gráfico que represente la tendencia de precios en el mercado inmobiliario en Palermo."
url_imagen_rentas = generar_imagen(prompt_imagen_rentas)
print("URL de la imagen generada:", url_imagen_rentas)

# Conclusión
print("\nDemostración completada. Hemos mostrado el funcionamiento de los módulos básicos del asistente, integrando generación de texto e imágenes.")
